/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//package org.apache.spark.examples.streaming

import org.apache.spark.SparkConf
import org.apache.spark.streaming._
import org.apache.spark.streaming.StreamingContext._

/**
 * Counts words cumulatively in UTF8 encoded, '\n' delimited text received from the network every
 * second.
 * Usage: StatefulNetworkWordCount <hostname> <port>
 *   <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive
 *   data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example
 *      org.apache.spark.examples.streaming.StatefulNetworkWordCount localhost 9999`
 */
object SimpleApp{

  def filter_portfolio(portfolio: Array[String]) : Boolean = {
        //val words = line.split(" ")
        if (portfolio(0) == "portfolio") {
            return true
        }
        return false
  }

  def process_portfolio(portfolio: Array[String]) : (String, Array[String]) = {
  //def process_portfolio(portfolio: Array[String]) : (String, String) = {
        return (portfolio(1), portfolio.slice(2, portfolio.length))
        //return (portfolio(1), portfolio(2))
    }

  def filter_price(portfolio: Array[String]) : Boolean = {
        if (portfolio(0) == "price") {
            return true
        }
        return false
  }

  def process_prices(prices: Array[String]) : (String) = {
        // todo return the lastest stock price
        //return (portfolio(1), portfolio.slice(2, portfolio.length))
        //return (portfolio(1), portfolio(2))
        return "123"
    }



    /*def caculate_portfolio(portfolio: (String, Array[String])) : (String, Int) = {
        
        return (portfolio._1, 20)
    }*/


  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: StatefulNetworkWordCount <hostname> <port>")
      System.exit(1)
    }

    //StreamingExamples.setStreamingLogLevels()


    val updateFunc = (values: Seq[Array[String]], state: Option[Array[String]]) => {
      val currentCount = values(0)

      val previousCount = state.getOrElse(0)

      Some(currentCount)
    }



    val sparkConf = new SparkConf().setAppName("StatefulNetworkWordCount")
    // Create the context with a 1 second batch size
    val ssc = new StreamingContext(sparkConf, Seconds(10))
    ssc.checkpoint("./test/")

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')
    val lines = ssc.socketTextStream(args(0), args(1).toInt)

    /*todo:
        1. 遍历lines,过滤出组合信息，组合信息，更新到持久数据里面
    */

    val portfolios = lines.map(_.split(" ")).filter(filter_portfolio).map(process_portfolio)
    //val prices = lines.map(_.split(" ")).filter(filter_price).reduce(process_prices)
    //portfolios.print()

    
    val words = lines.flatMap(_.split(" "))

    val wordDstream = words.map(x => (x, 1))

    // Update the cumulative count using updateStateByKey
    // This will give a Dstream made of state (which is the cumulative count of the words)
    //val stateDstream = wordDstream.updateStateByKey[Int](updateFunc)
    val stateDstream = portfolios.updateStateByKey[Array[String]](updateFunc)
    stateDstream.print()

    /*todo:
        2. 遍历line,过滤出股票信息，取最新的股票价格信息，遍历所以组合，计算每个组合的价格
    */

    var stock_price = 100
    val caculate_portfolio= (portfolio: (String, Array[String])) => {
        (portfolio._1, stock_price)
    }

    val portfolio_prices = stateDstream.map(caculate_portfolio)
    portfolio_prices.print()

    ssc.start()
    ssc.awaitTermination()
  }
}
